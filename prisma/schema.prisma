generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(cuid()) @map("_id")
  email              String      @unique
  username           String
  password           String
  description        String?
  blocked            Boolean     @default(false)
  isAdmin            Boolean     @default(false)
  resetPasswordToken String      @unique @default("")
  userImage          UserImage?
  following          Following[] @relation("UserFollowing")
  followers          Following[] @relation("UserFollowers")
  thoughts           Thought[]
  recipes            Recipe[]
  likes              Like[]
  comments           Comment[]
  messagesSent       Message[]   @relation("SentMessages")
  messagesReceived   Message[]   @relation("ReceivedMessages")
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model UserImage {
  id              String   @id @default(cuid()) @map("_id")
  cloudinaryImage String
  cloudinaryId    String
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Following {
  id          String   @id @default(cuid()) @map("_id")
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Thought {
  id        String    @id @default(cuid()) @map("_id")
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @unique
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  thought   Thought? @relation(fields: [thoughtId], references: [id])
  thoughtId String?
  recipe    Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, thoughtId])
  @@unique([authorId, recipeId])
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  thought   Thought? @relation(fields: [thoughtId], references: [id])
  thoughtId String?
  recipe    Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, thoughtId])
  @@unique([authorId, recipeId])
}

model Recipe {
  id           String        @id @default(cuid()) @map("_id")
  title        String
  recipeImages RecipeImage[]
  author       User          @relation(fields: [authorId], references: [id])
  authorId     String
  ingredients  String[]
  instructions String[]
  notes        String
  likes        Like[]
  comments     Comment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model RecipeImage {
  id              String   @id @default(cuid()) @map("_id")
  cloudinaryImage String
  cloudinaryId    String
  recipe          Recipe   @relation(fields: [recipeId], references: [id])
  recipeId        String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Message {
  id         String   @id @default(cuid()) @map("_id")
  author     User     @relation("SentMessages", fields: [authorId], references: [id])
  authorId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
